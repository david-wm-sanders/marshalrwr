//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "account")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub realm_id: i32,
    #[sea_orm(primary_key, auto_increment = false)]
    pub hash: i64,
    pub game_version: i32,
    pub squad_tag: String,
    #[sea_orm(column_type = "Double")]
    pub max_authority_reached: f64,
    #[sea_orm(column_type = "Double")]
    pub authority: f64,
    #[sea_orm(column_type = "Double")]
    pub job_points: f64,
    pub faction: i32,
    pub name: String,
    pub soldier_group_id: i32,
    pub soldier_group_name: String,
    pub squad_size_setting: i32,
    pub loadout: String,
    pub backpack: String,
    pub stash: String,
    pub kills: i32,
    pub deaths: i32,
    pub time_played: i32,
    pub player_kills: i32,
    pub teamkills: i32,
    pub longest_kill_streak: i32,
    pub targets_destroyed: i32,
    pub vehicles_destroyed: i32,
    pub soldiers_healed: i32,
    #[sea_orm(column_type = "Double")]
    pub distance_moved: f64,
    pub shots_fired: i32,
    pub throwables_thrown: i32,
    #[sea_orm(column_type = "Double")]
    pub rank_progression: f64,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::player::Entity",
        from = "Column::Hash",
        to = "super::player::Column::Hash",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Player,
    #[sea_orm(
        belongs_to = "super::realm::Entity",
        from = "Column::RealmId",
        to = "super::realm::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Realm,
}

impl Related<super::player::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Player.def()
    }
}

impl Related<super::realm::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Realm.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
