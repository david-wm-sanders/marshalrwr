//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "account")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub realm_id: i32,
    #[sea_orm(primary_key, auto_increment = false)]
    pub hash: i64,
    pub game_version: Option<i32>,
    pub squad_tag: Option<String>,
    #[sea_orm(column_type = "Double", nullable)]
    pub max_authority_reached: Option<f64>,
    #[sea_orm(column_type = "Double", nullable)]
    pub authority: Option<f64>,
    #[sea_orm(column_type = "Double", nullable)]
    pub job_points: Option<f64>,
    pub faction: Option<i32>,
    pub name: Option<String>,
    pub soldier_group_id: Option<i32>,
    pub soldier_group_name: Option<String>,
    pub squad_size_setting: Option<i32>,
    pub kills: Option<i32>,
    pub deaths: Option<i32>,
    pub time_played: Option<i32>,
    pub player_kills: Option<i32>,
    pub teamkills: Option<i32>,
    pub longest_kill_streak: Option<i32>,
    pub targets_destroyed: Option<i32>,
    pub vehicles_destroyed: Option<i32>,
    pub soldiers_healed: Option<i32>,
    #[sea_orm(column_type = "Double", nullable)]
    pub distance_moved: Option<f64>,
    pub shots_fired: Option<i32>,
    pub throwables_thrown: Option<i32>,
    #[sea_orm(column_type = "Double", nullable)]
    pub rank_progression: Option<f64>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::player::Entity",
        from = "Column::Hash",
        to = "super::player::Column::Hash",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Player,
    #[sea_orm(
        belongs_to = "super::realm::Entity",
        from = "Column::RealmId",
        to = "super::realm::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Realm,
}

impl Related<super::player::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Player.def()
    }
}

impl Related<super::realm::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Realm.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
